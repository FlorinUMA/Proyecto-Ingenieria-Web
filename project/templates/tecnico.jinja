{# Makes use of base.jinja #}
{% extends 'base.jinja' %}

{% block head %}
{# Adds the title, stylesheet links and favicon #}

<title>Robots</title>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="{{url_for('static',filename='js/changeReturn.js')}}"></script>

<style>
    li.nav-item{
        cursor: pointer;
    }
</style>

{% endblock %}

{%block navbar%}
<div class="collapse navbar-collapse" id="menuItems">
  <ul class="navbar-nav me-auto">
    <li class="nav-item">
      <a href="/tecnico/task-creator?user={{user}}" class="nav-link">Añadir nueva tarea</a>
    </li>
    <li class="nav-item">
      <a onclick="nuevoTipo('{{user}}')" class="nav-link" style="">Añadir nuevo tipo</a>
    </li>
    <li class="nav-item">
      <a href="/tecnico/ver-tareas?user={{user}}" class="nav-link">Tareas</a>
    </li>
  </ul>
</div>
{% endblock %}

{% block route %}
  Inicio > <u>Técnico</u>
{% endblock %}

{% block content%}
<script>custom_return("{{user}}")</script>

<div class="container-fluid my-5 px-5">
    <h2 class="mini_title">Robots</h2>
          
    <table class="table table-dark table-hover mx-auto" style="width: 85%">
      <thead class="thead-dark">
        <tr>
          <th scope="col">ID Robot</th>
          <th scope="col">Nombre</th>
          <th scope="col">Tareas</th>
        </tr>
      </thead>
      <tbody>
            {% for i in row %}
              <tr onclick="refRobot('{{user}}', {{i.id}})">
                <td>{{i.id}}</td>
                <td>{{i.nombre}}</td>
                <td>{{i.id|buscaTareas(tareas)}}</td>
                {# <td><button OnClick="refRobot({{i.id}})">Edit</button></td> #}
              </tr>
            {% endfor %}
      </tbody>
    </table>
  </div>

{% endblock %}

{% block scripts%}

<script>
function refRobot(user, id) {
  location.href = `/tecnico/robotDetails?user=${user}&id=${id}`;
}
</script>

<script>

async function nuevoTipo() {
        const { value: tipo } = await Swal.fire({
            title: 'Inserte el nuevo tipo',
            input: 'text',
            icon: 'question',
            inputLabel: 'Tipo:',
            showCancelButton: true,
            inputValidator: (value) => {
                if (!value) {
                return '¡El tipo no puede estar vacío!'
                }
            }
        })
        if(tipo) {
            const tipoNuevo = {
                "tipoNuevo": tipo
            };

            function postTipo(data) {
                return new Promise(function (resolve, reject){
                    fetch('/tecnico/nuevo-tipo', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                    })
                    .then(
                        (response) => response.json().then(data =>{
                            resolve(data);
                        }),
                        (error) => {reject(error);}
                    );
                })
            }

            let result = postTipo(tipoNuevo)
            if(result.hasOwnProperty('message')){
                msg = JSON.stringify(result.errors[0].message)
                Swal.fire("Webhook creation failed", msg.replace(/["]/g, ""), "error")
            }
            else {
                Swal.fire("Webhook created", "Webhook was created successfully", "success")
            }  
        }
    }

</script>

{% endblock %}